                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.1 #11255 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module wcslen
                                      6 	.optsdcc -mpdk13
                                      7 	
                                      8 
                                      9 ; default segment ordering in RAM for linker
                                     10 	.area DATA
                                     11 	.area OSEG (OVR,DATA)
                                     12 
                                     13 ;--------------------------------------------------------
                                     14 ; Public variables in this module
                                     15 ;--------------------------------------------------------
                                     16 	.globl _wcslen_PARM_1
                                     17 	.globl _wcslen
                                     18 ;--------------------------------------------------------
                                     19 ; special function registers
                                     20 ;--------------------------------------------------------
                                     21 	.area RSEG (ABS)
      000000                         22 	.org 0x0000
                                     23 ;--------------------------------------------------------
                                     24 ; ram data
                                     25 ;--------------------------------------------------------
                                     26 	.area DATA
      000000                         27 _wcslen_PARM_1:
      000000                         28 	.ds 2
                                     29 ;--------------------------------------------------------
                                     30 ; overlayable items in ram 
                                     31 ;--------------------------------------------------------
                                     32 	.area	OSEG (OVR,DATA)
      000000                         33 _wcslen_sloc0_1_0:
      000000                         34 	.ds 2
      000002                         35 _wcslen_sloc1_1_0:
      000002                         36 	.ds 2
      000004                         37 _wcslen_sloc2_1_0:
      000004                         38 	.ds 4
                                     39 ;--------------------------------------------------------
                                     40 ; absolute external ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area DABS (ABS)
                                     43 ;--------------------------------------------------------
                                     44 ; global & static initialisations
                                     45 ;--------------------------------------------------------
                                     46 	.area HOME
                                     47 	.area GSINIT
                                     48 	.area GSFINAL
                                     49 	.area GSINIT
                                     50 ;--------------------------------------------------------
                                     51 ; Home
                                     52 ;--------------------------------------------------------
                                     53 	.area HOME
                                     54 	.area HOME
                                     55 ;--------------------------------------------------------
                                     56 ; code
                                     57 ;--------------------------------------------------------
                                     58 	.area CODE
                                     59 ;	../wcslen.c: 31: size_t wcslen(const wchar_t *s)
                                     60 ;	-----------------------------------------
                                     61 ;	 function wcslen
                                     62 ;	-----------------------------------------
      000000                         63 _wcslen:
                                     64 ;	../wcslen.c: 34: while (*s)
      000000r00r13                   65 	clear	_wcslen_sloc0_1_0+0
      000002r01r13                   66 	clear	_wcslen_sloc0_1_0+1
      000004r80r0F                   67 	mov	a, _wcslen_PARM_1+0
      000006r82r0B                   68 	mov	_wcslen_sloc1_1_0+0, a
      000008r81r0F                   69 	mov	a, _wcslen_PARM_1+1
      00000Ar83r0B                   70 	mov	_wcslen_sloc1_1_0+1, a
      00000C                         71 00101$:
      00000Cr82r0F                   72 	mov	a, _wcslen_sloc1_1_0+0
      00000Er80r0B                   73 	mov	p, a
      000010r83r0F                   74 	mov	a, _wcslen_sloc1_1_0+1
      000012r00r38                   75 	call	__gptrget
      000014r84r0B                   76 	mov	_wcslen_sloc2_1_0+0, a
      000016r82r0F                   77 	mov	a, _wcslen_sloc1_1_0+0
      000018r80r0B                   78 	mov	p, a
      00001Ar83r0F                   79 	mov	a, _wcslen_sloc1_1_0+1
      00001Cr00r12                   80 	inc	p
      00001E 60 00                   81 	addc	a
      000020r00r38                   82 	call	__gptrget
      000022r85r0B                   83 	mov	_wcslen_sloc2_1_0+1, a
      000024r82r0F                   84 	mov	a, _wcslen_sloc1_1_0+0
      000026r80r0B                   85 	mov	p, a
      000028r83r0F                   86 	mov	a, _wcslen_sloc1_1_0+1
      00002Ar00r12                   87 	inc	p
      00002C 60 00                   88 	addc	a
      00002Er00r12                   89 	inc	p
      000030 60 00                   90 	addc	a
      000032r00r38                   91 	call	__gptrget
      000034r86r0B                   92 	mov	_wcslen_sloc2_1_0+2, a
      000036r82r0F                   93 	mov	a, _wcslen_sloc1_1_0+0
      000038r80r0B                   94 	mov	p, a
      00003Ar83r0F                   95 	mov	a, _wcslen_sloc1_1_0+1
      00003Cr80r13                   96 	xch	a, p
      00003E 03 28                   97 	add	a, #3
      000040r80r13                   98 	xch	a, p
      000042 60 00                   99 	addc	a
      000044r00r38                  100 	call	__gptrget
      000046r87r0B                  101 	mov	_wcslen_sloc2_1_0+3, a
      000048r84r0F                  102 	mov	a, _wcslen_sloc2_1_0+0
      00004Ar85r0E                  103 	or	a, _wcslen_sloc2_1_0+1
      00004Cr86r0E                  104 	or	a, _wcslen_sloc2_1_0+2
      00004Er87r0E                  105 	or	a, _wcslen_sloc2_1_0+3
      000050 00 2B                  106 	cneqsn	a, #0x00
      000052r60r30                  107 	goto	00103$
                                    108 ;	../wcslen.c: 36: n++;
      000054r00r12                  109 	inc	_wcslen_sloc0_1_0+0
      000056r01r10                  110 	addc	_wcslen_sloc0_1_0+1
                                    111 ;	../wcslen.c: 37: s++;
      000058 04 2F                  112 	mov	a, #0x04
      00005Ar02r08                  113 	add	_wcslen_sloc1_1_0+0, a
      00005Cr03r10                  114 	addc	_wcslen_sloc1_1_0+1
      00005Er0Cr30                  115 	goto	00101$
      000060                        116 00103$:
                                    117 ;	../wcslen.c: 40: return n;
      000060r81r0F                  118 	mov	a, _wcslen_sloc0_1_0+1
      000062r80r0B                  119 	mov	p, a
      000064r80r0F                  120 	mov	a, _wcslen_sloc0_1_0+0
                                    121 ;	../wcslen.c: 41: }
      000066 7A 00                  122 	ret
                                    123 	.area CODE
                                    124 	.area CONST
                                    125 	.area CABS (ABS)
