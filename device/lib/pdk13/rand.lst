                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.1 #11255 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module rand
                                      6 	.optsdcc -mpdk13
                                      7 	
                                      8 
                                      9 ; default segment ordering in RAM for linker
                                     10 	.area DATA
                                     11 	.area OSEG (OVR,DATA)
                                     12 
                                     13 ;--------------------------------------------------------
                                     14 ; Public variables in this module
                                     15 ;--------------------------------------------------------
                                     16 	.globl _srand_PARM_1
                                     17 	.globl _rand
                                     18 	.globl _srand
                                     19 ;--------------------------------------------------------
                                     20 ; special function registers
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG (ABS)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; ram data
                                     26 ;--------------------------------------------------------
                                     27 	.area DATA
      000000                         28 _s:
      000000                         29 	.ds 4
      000004                         30 _srand_PARM_1:
      000004                         31 	.ds 2
                                     32 ;--------------------------------------------------------
                                     33 ; overlayable items in ram 
                                     34 ;--------------------------------------------------------
                                     35 	.area	OSEG (OVR,DATA)
      000000                         36 _rand_sloc0_1_0:
      000000                         37 	.ds 4
      000004                         38 _rand_sloc1_1_0:
      000004                         39 	.ds 4
      000008                         40 _rand_sloc2_1_0:
      000008                         41 	.ds 4
      00000C                         42 _rand_sloc3_1_0:
      00000C                         43 	.ds 4
      000010                         44 _rand_sloc4_1_0:
      000010                         45 	.ds 4
      000014                         46 _rand_sloc5_1_0:
      000014                         47 	.ds 4
      000018                         48 _rand_sloc6_1_0:
      000018                         49 	.ds 4
      00001C                         50 _rand_sloc7_1_0:
      00001C                         51 	.ds 2
                                     52 ;--------------------------------------------------------
                                     53 ; absolute external ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area DABS (ABS)
                                     56 ;--------------------------------------------------------
                                     57 ; global & static initialisations
                                     58 ;--------------------------------------------------------
                                     59 	.area HOME
                                     60 	.area GSINIT
                                     61 	.area GSFINAL
                                     62 	.area GSINIT
                                     63 ;	../rand.c: 38: static uint32_t s = 0x80000001;
      000000 01 2F                   64 	mov	a, #0x01
      000002r80r0B                   65 	mov	_s+0, a
      000004r01r13                   66 	clear	_s+1
      000006r02r13                   67 	clear	_s+2
      000008 80 2F                   68 	mov	a, #0x80
      00000Ar83r0B                   69 	mov	_s+3, a
                                     70 ;--------------------------------------------------------
                                     71 ; Home
                                     72 ;--------------------------------------------------------
                                     73 	.area HOME
                                     74 	.area HOME
                                     75 ;--------------------------------------------------------
                                     76 ; code
                                     77 ;--------------------------------------------------------
                                     78 	.area CODE
                                     79 ;	../rand.c: 40: int rand(void)
                                     80 ;	-----------------------------------------
                                     81 ;	 function rand
                                     82 ;	-----------------------------------------
      000000                         83 _rand:
                                     84 ;	../rand.c: 42: register unsigned long t = s;
      000000r80r0F                   85 	mov	a, _s+0
      000002r80r0B                   86 	mov	_rand_sloc0_1_0+0, a
      000004r81r0F                   87 	mov	a, _s+1
      000006r81r0B                   88 	mov	_rand_sloc0_1_0+1, a
      000008r82r0F                   89 	mov	a, _s+2
      00000Ar82r0B                   90 	mov	_rand_sloc0_1_0+2, a
      00000Cr83r0F                   91 	mov	a, _s+3
      00000Er83r0B                   92 	mov	_rand_sloc0_1_0+3, a
                                     93 ;	../rand.c: 44: t ^= t >> 10;
      000010r81r0F                   94 	mov	a, _rand_sloc0_1_0+1
      000012r84r0B                   95 	mov	_rand_sloc1_1_0+0, a
      000014r82r0F                   96 	mov	a, _rand_sloc0_1_0+2
      000016r85r0B                   97 	mov	_rand_sloc1_1_0+1, a
      000018r83r0F                   98 	mov	a, _rand_sloc0_1_0+3
      00001Ar86r0B                   99 	mov	_rand_sloc1_1_0+2, a
      00001Cr07r13                  100 	clear	_rand_sloc1_1_0+3
      00001Er06r15                  101 	sr	_rand_sloc1_1_0+2
      000020r05r16                  102 	src	_rand_sloc1_1_0+1
      000022r04r16                  103 	src	_rand_sloc1_1_0+0
      000024r06r15                  104 	sr	_rand_sloc1_1_0+2
      000026r05r16                  105 	src	_rand_sloc1_1_0+1
      000028r04r16                  106 	src	_rand_sloc1_1_0+0
      00002Ar80r0F                  107 	mov	a, _rand_sloc0_1_0+0
      00002Cr04r0F                  108 	xor	a, _rand_sloc1_1_0+0
      00002Er88r0B                  109 	mov	_rand_sloc2_1_0+0, a
      000030r81r0F                  110 	mov	a, _rand_sloc0_1_0+1
      000032r05r0F                  111 	xor	a, _rand_sloc1_1_0+1
      000034r89r0B                  112 	mov	_rand_sloc2_1_0+1, a
      000036r82r0F                  113 	mov	a, _rand_sloc0_1_0+2
      000038r06r0F                  114 	xor	a, _rand_sloc1_1_0+2
      00003Ar8Ar0B                  115 	mov	_rand_sloc2_1_0+2, a
      00003Cr83r0F                  116 	mov	a, _rand_sloc0_1_0+3
      00003Er07r0F                  117 	xor	a, _rand_sloc1_1_0+3
      000040r8Br0B                  118 	mov	_rand_sloc2_1_0+3, a
                                    119 ;	../rand.c: 45: t ^= t << 9;
      000042r88r0F                  120 	mov	a, _rand_sloc2_1_0+0
      000044r8Dr0B                  121 	mov	_rand_sloc3_1_0+1, a
      000046r89r0F                  122 	mov	a, _rand_sloc2_1_0+1
      000048r8Er0B                  123 	mov	_rand_sloc3_1_0+2, a
      00004Ar8Ar0F                  124 	mov	a, _rand_sloc2_1_0+2
      00004Cr8Fr0B                  125 	mov	_rand_sloc3_1_0+3, a
      00004Er0Cr13                  126 	clear	_rand_sloc3_1_0+0
      000050r8Dr15                  127 	sl	_rand_sloc3_1_0+1
      000052r8Er16                  128 	slc	_rand_sloc3_1_0+2
      000054r8Fr16                  129 	slc	_rand_sloc3_1_0+3
      000056r88r0F                  130 	mov	a, _rand_sloc2_1_0+0
      000058r0Cr0F                  131 	xor	a, _rand_sloc3_1_0+0
      00005Ar90r0B                  132 	mov	_rand_sloc4_1_0+0, a
      00005Cr89r0F                  133 	mov	a, _rand_sloc2_1_0+1
      00005Er0Dr0F                  134 	xor	a, _rand_sloc3_1_0+1
      000060r91r0B                  135 	mov	_rand_sloc4_1_0+1, a
      000062r8Ar0F                  136 	mov	a, _rand_sloc2_1_0+2
      000064r0Er0F                  137 	xor	a, _rand_sloc3_1_0+2
      000066r92r0B                  138 	mov	_rand_sloc4_1_0+2, a
      000068r8Br0F                  139 	mov	a, _rand_sloc2_1_0+3
      00006Ar0Fr0F                  140 	xor	a, _rand_sloc3_1_0+3
                                    141 ;	../rand.c: 46: t ^= t >> 25;
      00006Cr93r0B                  142 	mov	_rand_sloc4_1_0+3, a
      00006Er94r0B                  143 	mov	_rand_sloc5_1_0+0, a
      000070r15r13                  144 	clear	_rand_sloc5_1_0+1
      000072r16r13                  145 	clear	_rand_sloc5_1_0+2
      000074r17r13                  146 	clear	_rand_sloc5_1_0+3
      000076r14r15                  147 	sr	_rand_sloc5_1_0+0
      000078r90r0F                  148 	mov	a, _rand_sloc4_1_0+0
      00007Ar14r0F                  149 	xor	a, _rand_sloc5_1_0+0
      00007Cr98r0B                  150 	mov	_rand_sloc6_1_0+0, a
      00007Er91r0F                  151 	mov	a, _rand_sloc4_1_0+1
      000080r15r0F                  152 	xor	a, _rand_sloc5_1_0+1
      000082r99r0B                  153 	mov	_rand_sloc6_1_0+1, a
      000084r92r0F                  154 	mov	a, _rand_sloc4_1_0+2
      000086r16r0F                  155 	xor	a, _rand_sloc5_1_0+2
      000088r9Ar0B                  156 	mov	_rand_sloc6_1_0+2, a
      00008Ar93r0F                  157 	mov	a, _rand_sloc4_1_0+3
      00008Cr17r0F                  158 	xor	a, _rand_sloc5_1_0+3
      00008Er9Br0B                  159 	mov	_rand_sloc6_1_0+3, a
                                    160 ;	../rand.c: 48: s = t;
      000090r98r0F                  161 	mov	a, _rand_sloc6_1_0+0
      000092r80r0B                  162 	mov	_s+0, a
      000094r99r0F                  163 	mov	a, _rand_sloc6_1_0+1
      000096r81r0B                  164 	mov	_s+1, a
      000098r9Ar0F                  165 	mov	a, _rand_sloc6_1_0+2
      00009Ar82r0B                  166 	mov	_s+2, a
      00009Cr9Br0F                  167 	mov	a, _rand_sloc6_1_0+3
      00009Er83r0B                  168 	mov	_s+3, a
                                    169 ;	../rand.c: 50: return(t & RAND_MAX);
      0000A0r98r0F                  170 	mov	a, _rand_sloc6_1_0+0
      0000A2r9Cr0B                  171 	mov	_rand_sloc7_1_0+0, a
      0000A4r99r0F                  172 	mov	a, _rand_sloc6_1_0+1
      0000A6r9Dr0B                  173 	mov	_rand_sloc7_1_0+1, a
      0000A8r9Cr0F                  174 	mov	a, _rand_sloc7_1_0+0
      0000AAr80r0B                  175 	mov	p, a
      0000ACr9Dr0F                  176 	mov	a, _rand_sloc7_1_0+1
      0000AE 7F 2C                  177 	and	a, #0x7f
      0000B0r80r13                  178 	xch	a, p
                                    179 ;	../rand.c: 51: }
      0000B2 7A 00                  180 	ret
                                    181 ;	../rand.c: 53: void srand(unsigned int seed)
                                    182 ;	-----------------------------------------
                                    183 ;	 function srand
                                    184 ;	-----------------------------------------
      0000B4                        185 _srand:
                                    186 ;	../rand.c: 55: s = seed | 0x80000000; /* s shall not become 0 */
      0000B4r84r0F                  187 	mov	a, _srand_PARM_1+0
      0000B6r80r0B                  188 	mov	_s+0, a
      0000B8r85r0F                  189 	mov	a, _srand_PARM_1+1
      0000BAr81r0B                  190 	mov	_s+1, a
      0000BCr02r13                  191 	clear	_s+2
      0000BE 00 2F                  192 	mov	a, #0x00
      0000C0 80 2D                  193 	or	a, #0x80
      0000C2r83r0B                  194 	mov	_s+3, a
                                    195 ;	../rand.c: 56: }
      0000C4 7A 00                  196 	ret
                                    197 	.area CODE
                                    198 	.area CONST
                                    199 	.area CABS (ABS)
