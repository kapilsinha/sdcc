                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.1 #11255 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module acosf
                                      6 	.optsdcc -mpdk13
                                      7 	
                                      8 
                                      9 ; default segment ordering in RAM for linker
                                     10 	.area DATA
                                     11 	.area OSEG (OVR,DATA)
                                     12 
                                     13 ;--------------------------------------------------------
                                     14 ; Public variables in this module
                                     15 ;--------------------------------------------------------
                                     16 	.globl _asincosf
                                     17 	.globl _acosf
                                     18 ;--------------------------------------------------------
                                     19 ; special function registers
                                     20 ;--------------------------------------------------------
                                     21 	.area RSEG (ABS)
      000000                         22 	.org 0x0000
                                     23 ;--------------------------------------------------------
                                     24 ; ram data
                                     25 ;--------------------------------------------------------
                                     26 	.area DATA
                                     27 ;--------------------------------------------------------
                                     28 ; overlayable items in ram 
                                     29 ;--------------------------------------------------------
                                     30 ;--------------------------------------------------------
                                     31 ; absolute external ram data
                                     32 ;--------------------------------------------------------
                                     33 	.area DABS (ABS)
                                     34 ;--------------------------------------------------------
                                     35 ; global & static initialisations
                                     36 ;--------------------------------------------------------
                                     37 	.area HOME
                                     38 	.area GSINIT
                                     39 	.area GSFINAL
                                     40 	.area GSINIT
                                     41 ;--------------------------------------------------------
                                     42 ; Home
                                     43 ;--------------------------------------------------------
                                     44 	.area HOME
                                     45 	.area HOME
                                     46 ;--------------------------------------------------------
                                     47 ; code
                                     48 ;--------------------------------------------------------
                                     49 	.area CODE
                                     50 ;	../acosf.c: 36: float acosf(float x) _FLOAT_FUNC_REENTRANT
                                     51 ;	-----------------------------------------
                                     52 ;	 function acosf
                                     53 ;	-----------------------------------------
      000000                         54 _acosf:
      000000 72 00                   55 	push	af
      000002 72 00                   56 	push	af
                                     57 ;	../acosf.c: 38: if (x == 1.0) return 0.0;
      000004 C2 01                   58 	mov	a, sp
      000006 F4 28                   59 	add	a, #0xf4
      000008r80r0B                   60 	mov	p, a
      00000Ar81r03                   61 	idxm	a, p
      00000Cr80r0B                   62 	mov	___fseq_PARM_1+0, a
      00000Er00r12                   63 	inc	p
      000010r81r03                   64 	idxm	a, p
      000012r81r0B                   65 	mov	___fseq_PARM_1+1, a
      000014r00r12                   66 	inc	p
      000016r81r03                   67 	idxm	a, p
      000018r82r0B                   68 	mov	___fseq_PARM_1+2, a
      00001Ar00r12                   69 	inc	p
      00001Cr81r03                   70 	idxm	a, p
      00001Er83r0B                   71 	mov	___fseq_PARM_1+3, a
      000020r00r13                   72 	clear	___fseq_PARM_2+0
      000022r01r13                   73 	clear	___fseq_PARM_2+1
      000024 80 2F                   74 	mov	a, #0x80
      000026r82r0B                   75 	mov	___fseq_PARM_2+2, a
      000028 3F 2F                   76 	mov	a, #0x3f
      00002Ar83r0B                   77 	mov	___fseq_PARM_2+3, a
      00002Cr00r38                   78 	call	___fseq
      00002E 00 2B                   79 	cneqsn	a, #0x00
      000030r54r30                   80 	goto	00108$
      000032 C2 01                   81 	mov	a, sp
      000034 F8 28                   82 	add	a, #0xf8
      000036r80r0B                   83 	mov	p, a
      000038r81r03                   84 	idxm	a, p
      00003Ar80r0B                   85 	mov	p, a
      00003C 00 2F                   86 	mov	a, #0x00
      00003Er80r03                   87 	idxm	p, a
      000040r00r12                   88 	inc	p
      000042 00 2F                   89 	mov	a, #0x00
      000044r80r03                   90 	idxm	p, a
      000046r00r12                   91 	inc	p
      000048 00 2F                   92 	mov	a, #0x00
      00004Ar80r03                   93 	idxm	p, a
      00004Cr00r12                   94 	inc	p
      00004E 00 2F                   95 	mov	a, #0x00
      000050r80r03                   96 	idxm	p, a
      000052r92r31                   97 	goto	00110$
      000054                         98 00108$:
                                     99 ;	../acosf.c: 39: else if (x ==-1.0) return PI;
      000054 C2 01                  100 	mov	a, sp
      000056 F4 28                  101 	add	a, #0xf4
      000058r80r0B                  102 	mov	p, a
      00005Ar81r03                  103 	idxm	a, p
      00005Cr80r0B                  104 	mov	___fseq_PARM_1+0, a
      00005Er00r12                  105 	inc	p
      000060r81r03                  106 	idxm	a, p
      000062r81r0B                  107 	mov	___fseq_PARM_1+1, a
      000064r00r12                  108 	inc	p
      000066r81r03                  109 	idxm	a, p
      000068r82r0B                  110 	mov	___fseq_PARM_1+2, a
      00006Ar00r12                  111 	inc	p
      00006Cr81r03                  112 	idxm	a, p
      00006Er83r0B                  113 	mov	___fseq_PARM_1+3, a
      000070r00r13                  114 	clear	___fseq_PARM_2+0
      000072r01r13                  115 	clear	___fseq_PARM_2+1
      000074 80 2F                  116 	mov	a, #0x80
      000076r82r0B                  117 	mov	___fseq_PARM_2+2, a
      000078 BF 2F                  118 	mov	a, #0xbf
      00007Ar83r0B                  119 	mov	___fseq_PARM_2+3, a
      00007Cr00r38                  120 	call	___fseq
      00007E 00 2B                  121 	cneqsn	a, #0x00
      000080rA4r30                  122 	goto	00105$
      000082 C2 01                  123 	mov	a, sp
      000084 F8 28                  124 	add	a, #0xf8
      000086r80r0B                  125 	mov	p, a
      000088r81r03                  126 	idxm	a, p
      00008Ar80r0B                  127 	mov	p, a
      00008C DB 2F                  128 	mov	a, #0xdb
      00008Er80r03                  129 	idxm	p, a
      000090r00r12                  130 	inc	p
      000092 0F 2F                  131 	mov	a, #0x0f
      000094r80r03                  132 	idxm	p, a
      000096r00r12                  133 	inc	p
      000098 49 2F                  134 	mov	a, #0x49
      00009Ar80r03                  135 	idxm	p, a
      00009Cr00r12                  136 	inc	p
      00009E 40 2F                  137 	mov	a, #0x40
      0000A0r80r03                  138 	idxm	p, a
      0000A2r92r31                  139 	goto	00110$
      0000A4                        140 00105$:
                                    141 ;	../acosf.c: 40: else if (x == 0.0) return HALF_PI;
      0000A4 C2 01                  142 	mov	a, sp
      0000A6 F7 28                  143 	add	a, #0xf7
      0000A8r80r0B                  144 	mov	p, a
      0000AAr81r03                  145 	idxm	a, p
      0000AC 7F 2C                  146 	and	a, #0x7f
      0000AE 72 00                  147 	push	af
      0000B0 FD 2F                  148 	mov	a, #-3
      0000B2r00r08                  149 	add	p, a
      0000B4r81r03                  150 	idxm	a, p
      0000B6r80r0B                  151 	mov	p, a
      0000B8 73 00                  152 	pop	af
      0000BAr80r0E                  153 	or	a, p
      0000BC 72 00                  154 	push	af
      0000BE C2 01                  155 	mov	a, sp
      0000C0 F3 28                  156 	add	a, #0xf3
      0000C2r80r0B                  157 	mov	p, a
      0000C4r81r03                  158 	idxm	a, p
      0000C6r80r0B                  159 	mov	p, a
      0000C8 73 00                  160 	pop	af
      0000CAr80r0E                  161 	or	a, p
      0000CC 72 00                  162 	push	af
      0000CE C2 01                  163 	mov	a, sp
      0000D0 F4 28                  164 	add	a, #0xf4
      0000D2r80r0B                  165 	mov	p, a
      0000D4r81r03                  166 	idxm	a, p
      0000D6r80r0B                  167 	mov	p, a
      0000D8 73 00                  168 	pop	af
      0000DAr80r0E                  169 	or	a, p
      0000DC 00 2A                  170 	ceqsn	a, #0x00
      0000DEr02r31                  171 	goto	00102$
      0000E0 C2 01                  172 	mov	a, sp
      0000E2 F8 28                  173 	add	a, #0xf8
      0000E4r80r0B                  174 	mov	p, a
      0000E6r81r03                  175 	idxm	a, p
      0000E8r80r0B                  176 	mov	p, a
      0000EA DB 2F                  177 	mov	a, #0xdb
      0000ECr80r03                  178 	idxm	p, a
      0000EEr00r12                  179 	inc	p
      0000F0 0F 2F                  180 	mov	a, #0x0f
      0000F2r80r03                  181 	idxm	p, a
      0000F4r00r12                  182 	inc	p
      0000F6 C9 2F                  183 	mov	a, #0xc9
      0000F8r80r03                  184 	idxm	p, a
      0000FAr00r12                  185 	inc	p
      0000FC 3F 2F                  186 	mov	a, #0x3f
      0000FEr80r03                  187 	idxm	p, a
      000100r92r31                  188 	goto	00110$
      000102                        189 00102$:
                                    190 ;	../acosf.c: 41: else               return asincosf(x, true);
      000102 C2 01                  191 	mov	a, sp
      000104 F4 28                  192 	add	a, #0xf4
      000106r80r0B                  193 	mov	p, a
      000108r81r03                  194 	idxm	a, p
      00010Ar80r0B                  195 	mov	_asincosf_PARM_1+0, a
      00010Cr00r12                  196 	inc	p
      00010Er81r03                  197 	idxm	a, p
      000110r81r0B                  198 	mov	_asincosf_PARM_1+1, a
      000112r00r12                  199 	inc	p
      000114r81r03                  200 	idxm	a, p
      000116r82r0B                  201 	mov	_asincosf_PARM_1+2, a
      000118r00r12                  202 	inc	p
      00011Ar81r03                  203 	idxm	a, p
      00011Cr83r0B                  204 	mov	_asincosf_PARM_1+3, a
      00011E 01 2F                  205 	mov	a, #0x01
      000120r80r0B                  206 	mov	_asincosf_PARM_2+0, a
      000122 C2 01                  207 	mov	a, sp
      000124 FC 28                  208 	add	a, #0xfc
      000126 72 00                  209 	push	af
      000128r00r38                  210 	call	_asincosf
      00012A C2 01                  211 	mov	a, sp
      00012C FE 28                  212 	add	a, #-2
      00012E 82 01                  213 	mov	sp, a
      000130 FC 28                  214 	add	a, #0xfc
      000132r80r0B                  215 	mov	p, a
      000134r81r03                  216 	idxm	a, p
      000136 72 00                  217 	push	af
      000138 FC 2F                  218 	mov	a, #-4
      00013Ar00r08                  219 	add	p, a
      00013Cr81r03                  220 	idxm	a, p
      00013Er80r0B                  221 	mov	p, a
      000140 73 00                  222 	pop	af
      000142r80r03                  223 	idxm	p, a
      000144 C2 01                  224 	mov	a, sp
      000146 FD 28                  225 	add	a, #0xfd
      000148r80r0B                  226 	mov	p, a
      00014Ar81r03                  227 	idxm	a, p
      00014C 72 00                  228 	push	af
      00014E FB 2F                  229 	mov	a, #-5
      000150r00r08                  230 	add	p, a
      000152r81r03                  231 	idxm	a, p
      000154r80r0B                  232 	mov	p, a
      000156 73 00                  233 	pop	af
      000158r00r12                  234 	inc	p
      00015Ar80r03                  235 	idxm	p, a
      00015C C2 01                  236 	mov	a, sp
      00015E FE 28                  237 	add	a, #0xfe
      000160r80r0B                  238 	mov	p, a
      000162r81r03                  239 	idxm	a, p
      000164 72 00                  240 	push	af
      000166 FA 2F                  241 	mov	a, #-6
      000168r00r08                  242 	add	p, a
      00016Ar81r03                  243 	idxm	a, p
      00016Cr80r0B                  244 	mov	p, a
      00016E 73 00                  245 	pop	af
      000170r00r12                  246 	inc	p
      000172r00r12                  247 	inc	p
      000174r80r03                  248 	idxm	p, a
      000176 C2 01                  249 	mov	a, sp
      000178 FF 28                  250 	add	a, #0xff
      00017Ar80r0B                  251 	mov	p, a
      00017Cr81r03                  252 	idxm	a, p
      00017E 72 00                  253 	push	af
      000180 F9 2F                  254 	mov	a, #-7
      000182r00r08                  255 	add	p, a
      000184r81r03                  256 	idxm	a, p
      000186r80r0B                  257 	mov	p, a
      000188 73 00                  258 	pop	af
      00018Ar00r12                  259 	inc	p
      00018Cr00r12                  260 	inc	p
      00018Er00r12                  261 	inc	p
      000190r80r03                  262 	idxm	p, a
      000192                        263 00110$:
                                    264 ;	../acosf.c: 42: }
      000192 C2 01                  265 	mov	a, sp
      000194 FC 28                  266 	add	a, #-4
      000196 82 01                  267 	mov	sp, a
      000198 7A 00                  268 	ret
                                    269 	.area CODE
                                    270 	.area CONST
                                    271 	.area CABS (ABS)
