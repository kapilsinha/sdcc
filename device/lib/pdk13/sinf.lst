                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.1 #11255 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module sinf
                                      6 	.optsdcc -mpdk13
                                      7 	
                                      8 
                                      9 ; default segment ordering in RAM for linker
                                     10 	.area DATA
                                     11 	.area OSEG (OVR,DATA)
                                     12 
                                     13 ;--------------------------------------------------------
                                     14 ; Public variables in this module
                                     15 ;--------------------------------------------------------
                                     16 	.globl _sincosf
                                     17 	.globl _sinf
                                     18 ;--------------------------------------------------------
                                     19 ; special function registers
                                     20 ;--------------------------------------------------------
                                     21 	.area RSEG (ABS)
      000000                         22 	.org 0x0000
                                     23 ;--------------------------------------------------------
                                     24 ; ram data
                                     25 ;--------------------------------------------------------
                                     26 	.area DATA
                                     27 ;--------------------------------------------------------
                                     28 ; overlayable items in ram 
                                     29 ;--------------------------------------------------------
                                     30 ;--------------------------------------------------------
                                     31 ; absolute external ram data
                                     32 ;--------------------------------------------------------
                                     33 	.area DABS (ABS)
                                     34 ;--------------------------------------------------------
                                     35 ; global & static initialisations
                                     36 ;--------------------------------------------------------
                                     37 	.area HOME
                                     38 	.area GSINIT
                                     39 	.area GSFINAL
                                     40 	.area GSINIT
                                     41 ;--------------------------------------------------------
                                     42 ; Home
                                     43 ;--------------------------------------------------------
                                     44 	.area HOME
                                     45 	.area HOME
                                     46 ;--------------------------------------------------------
                                     47 ; code
                                     48 ;--------------------------------------------------------
                                     49 	.area CODE
                                     50 ;	../sinf.c: 36: float sinf(float x) _FLOAT_FUNC_REENTRANT
                                     51 ;	-----------------------------------------
                                     52 ;	 function sinf
                                     53 ;	-----------------------------------------
      000000                         54 _sinf:
      000000 72 00                   55 	push	af
      000002 72 00                   56 	push	af
                                     57 ;	../sinf.c: 38: if (x==0.0) return 0.0;
      000004 C2 01                   58 	mov	a, sp
      000006 F7 28                   59 	add	a, #0xf7
      000008r80r0B                   60 	mov	p, a
      00000Ar81r03                   61 	idxm	a, p
      00000C 7F 2C                   62 	and	a, #0x7f
      00000E 72 00                   63 	push	af
      000010 FD 2F                   64 	mov	a, #-3
      000012r00r08                   65 	add	p, a
      000014r81r03                   66 	idxm	a, p
      000016r80r0B                   67 	mov	p, a
      000018 73 00                   68 	pop	af
      00001Ar80r0E                   69 	or	a, p
      00001C 72 00                   70 	push	af
      00001E C2 01                   71 	mov	a, sp
      000020 F3 28                   72 	add	a, #0xf3
      000022r80r0B                   73 	mov	p, a
      000024r81r03                   74 	idxm	a, p
      000026r80r0B                   75 	mov	p, a
      000028 73 00                   76 	pop	af
      00002Ar80r0E                   77 	or	a, p
      00002C 72 00                   78 	push	af
      00002E C2 01                   79 	mov	a, sp
      000030 F4 28                   80 	add	a, #0xf4
      000032r80r0B                   81 	mov	p, a
      000034r81r03                   82 	idxm	a, p
      000036r80r0B                   83 	mov	p, a
      000038 73 00                   84 	pop	af
      00003Ar80r0E                   85 	or	a, p
      00003C 00 2A                   86 	ceqsn	a, #0x00
      00003Er62r30                   87 	goto	00102$
      000040 C2 01                   88 	mov	a, sp
      000042 F8 28                   89 	add	a, #0xf8
      000044r80r0B                   90 	mov	p, a
      000046r81r03                   91 	idxm	a, p
      000048r80r0B                   92 	mov	p, a
      00004A 00 2F                   93 	mov	a, #0x00
      00004Cr80r03                   94 	idxm	p, a
      00004Er00r12                   95 	inc	p
      000050 00 2F                   96 	mov	a, #0x00
      000052r80r03                   97 	idxm	p, a
      000054r00r12                   98 	inc	p
      000056 00 2F                   99 	mov	a, #0x00
      000058r80r03                  100 	idxm	p, a
      00005Ar00r12                  101 	inc	p
      00005C 00 2F                  102 	mov	a, #0x00
      00005Er80r03                  103 	idxm	p, a
      000060rF0r30                  104 	goto	00103$
      000062                        105 00102$:
                                    106 ;	../sinf.c: 39: return sincosf(x, 0);
      000062 C2 01                  107 	mov	a, sp
      000064 F4 28                  108 	add	a, #0xf4
      000066r80r0B                  109 	mov	p, a
      000068r81r03                  110 	idxm	a, p
      00006Ar80r0B                  111 	mov	_sincosf_PARM_1+0, a
      00006Cr00r12                  112 	inc	p
      00006Er81r03                  113 	idxm	a, p
      000070r81r0B                  114 	mov	_sincosf_PARM_1+1, a
      000072r00r12                  115 	inc	p
      000074r81r03                  116 	idxm	a, p
      000076r82r0B                  117 	mov	_sincosf_PARM_1+2, a
      000078r00r12                  118 	inc	p
      00007Ar81r03                  119 	idxm	a, p
      00007Cr83r0B                  120 	mov	_sincosf_PARM_1+3, a
      00007Er00r13                  121 	clear	_sincosf_PARM_2+0
      000080 C2 01                  122 	mov	a, sp
      000082 FC 28                  123 	add	a, #0xfc
      000084 72 00                  124 	push	af
      000086r00r38                  125 	call	_sincosf
      000088 C2 01                  126 	mov	a, sp
      00008A FE 28                  127 	add	a, #-2
      00008C 82 01                  128 	mov	sp, a
      00008E FC 28                  129 	add	a, #0xfc
      000090r80r0B                  130 	mov	p, a
      000092r81r03                  131 	idxm	a, p
      000094 72 00                  132 	push	af
      000096 FC 2F                  133 	mov	a, #-4
      000098r00r08                  134 	add	p, a
      00009Ar81r03                  135 	idxm	a, p
      00009Cr80r0B                  136 	mov	p, a
      00009E 73 00                  137 	pop	af
      0000A0r80r03                  138 	idxm	p, a
      0000A2 C2 01                  139 	mov	a, sp
      0000A4 FD 28                  140 	add	a, #0xfd
      0000A6r80r0B                  141 	mov	p, a
      0000A8r81r03                  142 	idxm	a, p
      0000AA 72 00                  143 	push	af
      0000AC FB 2F                  144 	mov	a, #-5
      0000AEr00r08                  145 	add	p, a
      0000B0r81r03                  146 	idxm	a, p
      0000B2r80r0B                  147 	mov	p, a
      0000B4 73 00                  148 	pop	af
      0000B6r00r12                  149 	inc	p
      0000B8r80r03                  150 	idxm	p, a
      0000BA C2 01                  151 	mov	a, sp
      0000BC FE 28                  152 	add	a, #0xfe
      0000BEr80r0B                  153 	mov	p, a
      0000C0r81r03                  154 	idxm	a, p
      0000C2 72 00                  155 	push	af
      0000C4 FA 2F                  156 	mov	a, #-6
      0000C6r00r08                  157 	add	p, a
      0000C8r81r03                  158 	idxm	a, p
      0000CAr80r0B                  159 	mov	p, a
      0000CC 73 00                  160 	pop	af
      0000CEr00r12                  161 	inc	p
      0000D0r00r12                  162 	inc	p
      0000D2r80r03                  163 	idxm	p, a
      0000D4 C2 01                  164 	mov	a, sp
      0000D6 FF 28                  165 	add	a, #0xff
      0000D8r80r0B                  166 	mov	p, a
      0000DAr81r03                  167 	idxm	a, p
      0000DC 72 00                  168 	push	af
      0000DE F9 2F                  169 	mov	a, #-7
      0000E0r00r08                  170 	add	p, a
      0000E2r81r03                  171 	idxm	a, p
      0000E4r80r0B                  172 	mov	p, a
      0000E6 73 00                  173 	pop	af
      0000E8r00r12                  174 	inc	p
      0000EAr00r12                  175 	inc	p
      0000ECr00r12                  176 	inc	p
      0000EEr80r03                  177 	idxm	p, a
      0000F0                        178 00103$:
                                    179 ;	../sinf.c: 40: }
      0000F0 C2 01                  180 	mov	a, sp
      0000F2 FC 28                  181 	add	a, #-4
      0000F4 82 01                  182 	mov	sp, a
      0000F6 7A 00                  183 	ret
                                    184 	.area CODE
                                    185 	.area CONST
                                    186 	.area CABS (ABS)
