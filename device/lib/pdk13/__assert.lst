                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.1 #11255 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module __assert
                                      6 	.optsdcc -mpdk13
                                      7 	
                                      8 
                                      9 ; default segment ordering in RAM for linker
                                     10 	.area DATA
                                     11 	.area OSEG (OVR,DATA)
                                     12 
                                     13 ;--------------------------------------------------------
                                     14 ; Public variables in this module
                                     15 ;--------------------------------------------------------
                                     16 	.globl ___assert
                                     17 	.globl _printf
                                     18 	.globl ___assert_PARM_4
                                     19 	.globl ___assert_PARM_3
                                     20 	.globl ___assert_PARM_2
                                     21 	.globl ___assert_PARM_1
                                     22 ;--------------------------------------------------------
                                     23 ; special function registers
                                     24 ;--------------------------------------------------------
                                     25 	.area RSEG (ABS)
      000000                         26 	.org 0x0000
                                     27 ;--------------------------------------------------------
                                     28 ; ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area DATA
      000000                         31 ___assert_PARM_1:
      000000                         32 	.ds 2
      000002                         33 ___assert_PARM_2:
      000002                         34 	.ds 2
      000004                         35 ___assert_PARM_3:
      000004                         36 	.ds 2
      000006                         37 ___assert_PARM_4:
      000006                         38 	.ds 2
                                     39 ;--------------------------------------------------------
                                     40 ; overlayable items in ram 
                                     41 ;--------------------------------------------------------
                                     42 ;--------------------------------------------------------
                                     43 ; absolute external ram data
                                     44 ;--------------------------------------------------------
                                     45 	.area DABS (ABS)
                                     46 ;--------------------------------------------------------
                                     47 ; global & static initialisations
                                     48 ;--------------------------------------------------------
                                     49 	.area HOME
                                     50 	.area GSINIT
                                     51 	.area GSFINAL
                                     52 	.area GSINIT
                                     53 ;--------------------------------------------------------
                                     54 ; Home
                                     55 ;--------------------------------------------------------
                                     56 	.area HOME
                                     57 	.area HOME
                                     58 ;--------------------------------------------------------
                                     59 ; code
                                     60 ;--------------------------------------------------------
                                     61 	.area CODE
                                     62 ;	../__assert.c: 32: void __assert(const char *expression, const char *functionname, const char *filename, unsigned int linenumber)
                                     63 ;	-----------------------------------------
                                     64 ;	 function __assert
                                     65 ;	-----------------------------------------
      000000                         66 ___assert:
                                     67 ;	../__assert.c: 34: printf("Assert(%s) failed in function %s at line %u in file %s.\n",
      000000r84r0F                   68 	mov	a, ___assert_PARM_3+0
      000002 72 00                   69 	push	af
      000004 C2 01                   70 	mov	a, sp
      000006 FF 28                   71 	add	a, #0xff
      000008r80r0B                   72 	mov	p, a
      00000Ar85r0F                   73 	mov	a, ___assert_PARM_3+1
      00000Cr80r03                   74 	idxm	p, a
      00000Er86r0F                   75 	mov	a, ___assert_PARM_4+0
      000010 72 00                   76 	push	af
      000012r00r12                   77 	inc	p
      000014r00r12                   78 	inc	p
      000016r87r0F                   79 	mov	a, ___assert_PARM_4+1
      000018r80r03                   80 	idxm	p, a
      00001Ar82r0F                   81 	mov	a, ___assert_PARM_2+0
      00001C 72 00                   82 	push	af
      00001Er00r12                   83 	inc	p
      000020r00r12                   84 	inc	p
      000022r83r0F                   85 	mov	a, ___assert_PARM_2+1
      000024r80r03                   86 	idxm	p, a
      000026r80r0F                   87 	mov	a, ___assert_PARM_1+0
      000028 72 00                   88 	push	af
      00002Ar00r12                   89 	inc	p
      00002Cr00r12                   90 	inc	p
      00002Er81r0F                   91 	mov	a, ___assert_PARM_1+1
      000030r80r03                   92 	idxm	p, a
      000032r00r2F                   93 	mov	a, #<(___str_0 + 0)
      000034 72 00                   94 	push	af
      000036r00r12                   95 	inc	p
      000038r00r12                   96 	inc	p
      00003Ar00r2F                   97 	mov	a, #>(___str_0 + 0x8000 + 0)
      00003Cr80r03                   98 	idxm	p, a
      00003Er00r38                   99 	call	_printf
      000040 C2 01                  100 	mov	a, sp
      000042 F6 28                  101 	add	a, #-10
      000044 82 01                  102 	mov	sp, a
      000046                        103 00103$:
      000046r46r30                  104 	goto	00103$
                                    105 ;	../__assert.c: 37: }
      000048 7A 00                  106 	ret
                                    107 	.area CODE
                                    108 	.area CONST
                                    109 	.area CONST
      000000                        110 ___str_0:
      000000 41 02                  111 	ret #0x41	; A
      000002 73 02                  112 	ret #0x73	; s
      000004 73 02                  113 	ret #0x73	; s
      000006 65 02                  114 	ret #0x65	; e
      000008 72 02                  115 	ret #0x72	; r
      00000A 74 02                  116 	ret #0x74	; t
      00000C 28 02                  117 	ret #0x28	; (
      00000E 25 02                  118 	ret #0x25	; %
      000010 73 02                  119 	ret #0x73	; s
      000012 29 02                  120 	ret #0x29	; )
      000014 20 02                  121 	ret #0x20	;  
      000016 66 02                  122 	ret #0x66	; f
      000018 61 02                  123 	ret #0x61	; a
      00001A 69 02                  124 	ret #0x69	; i
      00001C 6C 02                  125 	ret #0x6c	; l
      00001E 65 02                  126 	ret #0x65	; e
      000020 64 02                  127 	ret #0x64	; d
      000022 20 02                  128 	ret #0x20	;  
      000024 69 02                  129 	ret #0x69	; i
      000026 6E 02                  130 	ret #0x6e	; n
      000028 20 02                  131 	ret #0x20	;  
      00002A 66 02                  132 	ret #0x66	; f
      00002C 75 02                  133 	ret #0x75	; u
      00002E 6E 02                  134 	ret #0x6e	; n
      000030 63 02                  135 	ret #0x63	; c
      000032 74 02                  136 	ret #0x74	; t
      000034 69 02                  137 	ret #0x69	; i
      000036 6F 02                  138 	ret #0x6f	; o
      000038 6E 02                  139 	ret #0x6e	; n
      00003A 20 02                  140 	ret #0x20	;  
      00003C 25 02                  141 	ret #0x25	; %
      00003E 73 02                  142 	ret #0x73	; s
      000040 20 02                  143 	ret #0x20	;  
      000042 61 02                  144 	ret #0x61	; a
      000044 74 02                  145 	ret #0x74	; t
      000046 20 02                  146 	ret #0x20	;  
      000048 6C 02                  147 	ret #0x6c	; l
      00004A 69 02                  148 	ret #0x69	; i
      00004C 6E 02                  149 	ret #0x6e	; n
      00004E 65 02                  150 	ret #0x65	; e
      000050 20 02                  151 	ret #0x20	;  
      000052 25 02                  152 	ret #0x25	; %
      000054 75 02                  153 	ret #0x75	; u
      000056 20 02                  154 	ret #0x20	;  
      000058 69 02                  155 	ret #0x69	; i
      00005A 6E 02                  156 	ret #0x6e	; n
      00005C 20 02                  157 	ret #0x20	;  
      00005E 66 02                  158 	ret #0x66	; f
      000060 69 02                  159 	ret #0x69	; i
      000062 6C 02                  160 	ret #0x6c	; l
      000064 65 02                  161 	ret #0x65	; e
      000066 20 02                  162 	ret #0x20	;  
      000068 25 02                  163 	ret #0x25	; %
      00006A 73 02                  164 	ret #0x73	; s
      00006C 2E 02                  165 	ret #0x2e	; .
      00006E 0A 02                  166 	ret #0x0a
      000070 00 02                  167 	ret #0x00
                                    168 	.area CODE
                                    169 	.area CABS (ABS)
